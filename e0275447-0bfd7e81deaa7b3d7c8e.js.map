{"version":3,"sources":["webpack:///./src/components/Slot/SlotStyles.js"],"names":["typeColors","other","colors","blueDark","talk","green","lightningTalk","blue","workshop","purple","gridTemplates","desktop","mobile","responsiveStyles","type","room","speakers","getViewTypeForDesktop","viewType","getStyledSlotGridWrapperStyle","isMobile","spacing","small","normal","large","StyledSlotGridWrapper","p","mediaQueries","medium","getSlotGridStyle","desktopOrMobile","StyledSlotGrid","rowGap","StyledType","StyledTime","StyledTitle","StyledFavorite","StyledDuration","StyledRoom","StyledRoomLabel","grey","StyledRoomIcon","StyledRoomName","StyledDescription","StyledSpeakers","StyledUserIcon","StyledUserLabel","StyledUserName"],"mappings":"+tBAMO,IAAMA,EAAa,CACxBC,MAAOC,IAAOC,SACdC,KAAMF,IAAOG,MACbC,cAAeJ,IAAOK,KACtBC,SAAUN,IAAOO,QAGbC,EAAgB,CACpBN,KAAM,CACJO,QAAQ,oOASRC,OAAO,oQAYTN,cAAe,CACbK,QAAQ,oOASRC,OAAO,oQAYTX,MAAO,CACLU,QAAQ,2PAURC,OAAO,yOAaLC,EAAmB,CACvBC,KAAM,CACJH,QAAQ,mFAIRC,OAAO,+GAMTG,KAAM,CACJJ,QAAQ,0IAKRC,OAAO,sJAQTI,SAAU,CACRL,QAAQ,oJAKRC,OAAO,kKAULK,EAAwB,SAAAC,GAAQ,MACvB,QAAbA,EAAqB,UAAY,UAE7BC,EAAgC,SAACD,EAAUE,GAC/C,YADoE,IAArBA,OAAW,GACzC,WAAbF,GAAyBE,EAC3B,sBACYC,IAAQC,MADpB,mBAE+B,WAAbJ,IAA0BE,GAAYC,IAAQE,OAFhE,uBAGwBF,IAAQC,MAHhC,6EAUF,0BACgBD,IAAQG,MADxB,kDAG2BH,IAAQC,MAHnC,0EAOqBD,IAAQG,MAP7B,OAWWC,EAAqB,iGAI9B,SAAAC,GAAC,OAAIP,EAA8BO,EAAER,UAAU,KAJjB,YAMtBS,IAAaC,OANS,MAO5B,SAAAF,GAAC,OAAIP,EAA8BO,EAAER,UAAU,KAPnB,MAW5BW,EAAmB,SAACf,EAAMI,EAAUE,QAAqB,IAArBA,OAAW,GACnD,IAAMU,EACS,WAAbZ,GAAyBE,EAAW,SAAW,UACjD,OAAIN,GACeJ,EAAcI,IAASJ,EAAcN,MACtC0B,GAEXpB,EAAcT,MAAM6B,IAGhBC,EAAc,oFAGdV,IAAQE,OAHM,kBAIT,SAAAG,GAAC,OAAIA,EAAEM,QAAUX,IAAQC,QAJhB,KAKvB,SAAAI,GAAC,OAAIG,EAAiBH,EAAEZ,KAAMY,EAAER,UAAU,KALnB,iCAUfS,IAAaC,OAVE,MAWrB,SAAAF,GAAC,OAAIG,EAAiBH,EAAEZ,KAAMY,EAAER,UAAU,KAXrB,MAede,EAAU,2EAED,SAAAP,GAAC,OAAKA,EAAEZ,KAAOd,EAAW0B,EAAEZ,MAAQd,EAAWC,QAF9C,sBAGD,SAAAyB,GAAC,OAAKA,EAAEZ,KAAOd,EAAW0B,EAAEZ,MAAQd,EAAWC,QAH9C,KAInB,SAAAyB,GAAC,OAAIb,EAAiBC,KAAKG,EAAsBS,EAAER,aAJhC,YAMXS,IAAaC,OANF,KAOjBf,EAAiBC,KAAKF,OAPL,KAYVsB,EAAU,iFAIVC,EAAW,kFAIXC,EAAc,yGAKdC,EAAc,qFAIdC,EAAU,uEAGnB,SAAAZ,GAAC,OAAIb,EAAiBE,KAAKE,EAAsBS,EAAER,aAHhC,YAKXS,IAAaC,OALF,KAMjBf,EAAiBE,KAAKH,OANL,KAUV2B,EAAe,iGAKPlB,IAAQC,MALD,UAMfpB,IAAOsC,KANQ,MAUfC,EAAc,sFAGdC,EAAc,2JASdC,EAAiB,6HAMjBC,EAAc,uGAIvB,SAAAlB,GAAC,OAAIb,EAAiBG,SAASC,EAAsBS,EAAER,aAJhC,YAMfS,IAAaC,OANE,KAOrBf,EAAiBG,SAASJ,OAPL,KAWdiC,EAAc,yFAIdC,EAAe,qGAIPzB,IAAQC,MAJD,UAKfpB,IAAOsC,KALQ,MASfO,EAAc","file":"e0275447-0bfd7e81deaa7b3d7c8e.js","sourcesContent":["import styled from '@emotion/styled';\nimport css from '@emotion/css';\nimport colors from '../../util/colors';\nimport mediaQueries from '../../util/mediaQueries';\nimport spacing from '../../util/spacing';\n\nexport const typeColors = {\n  other: colors.blueDark,\n  talk: colors.green,\n  lightningTalk: colors.blue,\n  workshop: colors.purple,\n};\n\nconst gridTemplates = {\n  talk: {\n    desktop: css`\n      grid-template-rows: auto;\n      grid-template-columns: 10% 80% 10%;\n      grid-template-areas:\n        'time     title       favorite'\n        'duration description favorite'\n        '.        speakers    speakers'\n        '.        room        room';\n    `,\n    mobile: css`\n      grid-template-rows: auto auto auto auto auto auto;\n      grid-template-columns: 70% 30%;\n      grid-template-areas:\n        'time        favorite'\n        'duration    favorite'\n        'title       title'\n        'description description'\n        'speakers    speakers'\n        'room        room';\n    `,\n  },\n  lightningTalk: {\n    desktop: css`\n      grid-template-rows: auto;\n      grid-template-columns: 10% 80% 10%;\n      grid-template-areas:\n        'time     title       favorite'\n        'duration description favorite'\n        '.        speakers    speakers'\n        '.        room        room';\n    `,\n    mobile: css`\n      grid-template-rows: auto auto auto auto auto auto;\n      grid-template-columns: 70% 30%;\n      grid-template-areas:\n        'time        favorite'\n        'duration    favorite'\n        'title       title'\n        'description description'\n        'speakers    speakers'\n        'room        room';\n    `,\n  },\n  other: {\n    desktop: css`\n      grid-template-rows: auto auto auto;\n      grid-template-columns: 10% 80% 10%;\n      align-items: center;\n      grid-template-areas:\n        'time title favorite'\n        'time     title       favorite'\n        'duration description description'\n        '.        room        room';\n    `,\n    mobile: css`\n      grid-template-rows: auto auto auto auto auto;\n      grid-template-columns: 70% 30%;\n      grid-template-areas:\n        'time        favorite'\n        'duration    favorite'\n        'title       title'\n        'description description'\n        'room        room';\n    `,\n  },\n};\n\nconst responsiveStyles = {\n  type: {\n    desktop: css`\n      border-top-left-radius: 5px;\n      border-bottom-left-radius: 5px;\n    `,\n    mobile: css`\n      border-bottom-left-radius: 0;\n      border-top-right-radius: 5px;\n      border-top-left-radius: 5px;\n    `,\n  },\n  room: {\n    desktop: css`\n      grid-template-rows: auto;\n      grid-template-columns: 30px 190px auto;\n      grid-template-areas: 'roomIcon roomLabel roomName';\n    `,\n    mobile: css`\n      grid-template-rows: 30px auto;\n      grid-template-columns: 30px auto;\n      grid-template-areas:\n        'roomIcon roomLabel'\n        'roomIcon roomName';\n    `,\n  },\n  speakers: {\n    desktop: css`\n      grid-template-rows: auto;\n      grid-template-columns: 30px 190px auto;\n      grid-template-areas: 'speakerIcon speakerLabel speakerName';\n    `,\n    mobile: css`\n      grid-template-rows: 30px auto;\n      grid-template-columns: 30px auto;\n      grid-template-areas:\n        'speakerIcon speakerLabel'\n        'speakerIcon speakerName';\n    `,\n  },\n};\n\nconst getViewTypeForDesktop = viewType =>\n  viewType === 'row' ? 'desktop' : 'mobile';\n\nconst getStyledSlotGridWrapperStyle = (viewType, isMobile = false) => {\n  if (viewType === 'column' || isMobile) {\n    return css`\n      margin: ${spacing.small} 0;\n      margin-right: ${viewType === 'column' && !isMobile && spacing.normal};\n      grid-template-rows: ${spacing.small} auto;\n      grid-template-columns: 100%;\n      grid-template-areas:\n        'type'\n        'allContent';\n    `;\n  }\n  return css`\n    margin-top: ${spacing.large};\n    grid-template-rows: auto;\n    grid-template-columns: ${spacing.small} auto;\n    grid-template-areas: 'type allContent';\n\n    &:last-child {\n      margin-bottom: ${spacing.large};\n    }\n  `;\n};\nexport const StyledSlotGridWrapper = styled.div`\n  display: grid;\n  background-color: white;\n  border-radius: 5px;\n  ${p => getStyledSlotGridWrapperStyle(p.viewType, false)};\n\n  @media (${mediaQueries.medium}) {\n    ${p => getStyledSlotGridWrapperStyle(p.viewType, true)};\n  }\n`;\n\nconst getSlotGridStyle = (type, viewType, isMobile = false) => {\n  const desktopOrMobile =\n    viewType === 'column' || isMobile ? 'mobile' : 'desktop';\n  if (type) {\n    const template = gridTemplates[type] || gridTemplates.talk;\n    return template[desktopOrMobile];\n  }\n  return gridTemplates.other[desktopOrMobile];\n};\n\nexport const StyledSlotGrid = styled.div`\n  display: grid;\n  grid-area: allContent;\n  padding: ${spacing.normal};\n  grid-row-gap: ${p => p.rowGap || spacing.small};\n  ${p => getSlotGridStyle(p.type, p.viewType, false)};\n  & b {\n    font-weight: 900;\n  }\n\n  @media (${mediaQueries.medium}) {\n    ${p => getSlotGridStyle(p.type, p.viewType, true)};\n  }\n`;\n\nexport const StyledType = styled.div`\n  grid-area: type;\n  background-color: ${p => (p.type ? typeColors[p.type] : typeColors.other)};\n  border: 1px solid ${p => (p.type ? typeColors[p.type] : typeColors.other)};\n  ${p => responsiveStyles.type[getViewTypeForDesktop(p.viewType)]}\n  \n  @media (${mediaQueries.medium}) {\n    ${responsiveStyles.type.mobile}\n\n  }\n`;\n\nexport const StyledTime = styled.div`\n  grid-area: time;\n`;\n\nexport const StyledTitle = styled.div`\n  grid-area: title;\n`;\n\nexport const StyledFavorite = styled.div`\n  grid-area: favorite;\n  justify-self: right;\n`;\n\nexport const StyledDuration = styled.div`\n  grid-area: duration;\n`;\n\nexport const StyledRoom = styled.div`\n  grid-area: room;\n  display: grid;\n  ${p => responsiveStyles.room[getViewTypeForDesktop(p.viewType)]}\n\n  @media (${mediaQueries.medium}) {\n    ${responsiveStyles.room.mobile}\n  }\n`;\n\nexport const StyledRoomLabel = styled.div`\n  grid-area: roomLabel;\n  display: flex;\n\n  & > svg {\n    padding-right: ${spacing.small};\n    color: ${colors.grey};\n  }\n`;\n\nexport const StyledRoomIcon = styled.div`\n  grid-area: roomIcon;\n`;\nexport const StyledRoomName = styled.b`\n  grid-area: roomName;\n  a {\n    color: rgb(49, 119, 248);\n    text-decoration: underline;\n    font-weight: normal;\n  }\n`;\n\nexport const StyledDescription = styled.div`\n  grid-area: description;\n  display: flex;\n  word-break: break-word;\n`;\n\nexport const StyledSpeakers = styled.div`\n  grid-area: speakers;\n  display: grid;\n  grid-auto-rows: min-content;\n  ${p => responsiveStyles.speakers[getViewTypeForDesktop(p.viewType)]}\n\n  @media (${mediaQueries.medium}) {\n    ${responsiveStyles.speakers.mobile}\n  }\n`;\n\nexport const StyledUserIcon = styled.div`\n  grid-area: speakerIcon;\n`;\n\nexport const StyledUserLabel = styled.div`\n  grid-area: speakerLabel;\n  display: flex;\n  & > svg {\n    padding-right: ${spacing.small};\n    color: ${colors.grey};\n  }\n`;\n\nexport const StyledUserName = styled.b`\n  grid-area: speakerName;\n  & button {\n    text-align: left;\n  }\n`;\n"],"sourceRoot":""}